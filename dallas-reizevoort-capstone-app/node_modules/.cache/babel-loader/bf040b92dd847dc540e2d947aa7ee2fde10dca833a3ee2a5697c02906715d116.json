{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/Auth/AuthProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\n\n// Spotify web API is stateless, there are no server side sessions or storage.\n// The token will continue to work for within my site to make requests for 1 hour until it expires.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children,\n  code\n}) {\n  _s();\n  const accessToken = useAuth(code);\n  const setAccessToken = useState(localStorage.getItem(\"accessToken\"));\n  const [refreshToken, setRefreshToken] = useState(localStorage.getItem(\"refreshToken\"));\n  const spotifyApi = useRef(new spotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  const cancel = useRef(false);\n  const debounceTimeoutRef = useRef(null);\n  const handleLogout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    setAccessToken(null);\n    setRefreshToken(null);\n    window.location.href = \"/\";\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      accessToken,\n      refreshToken,\n      handleLogout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"4jLfd7mXz6oyuc3IWynktP5vUSU=\", false, function () {\n  return [useAuth];\n});\n_c = AuthProvider;\nexport function useAuthContext() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuthContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useAuth","SpotifyWebApi","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","code","_s","accessToken","setAccessToken","localStorage","getItem","refreshToken","setRefreshToken","spotifyApi","useRef","spotifyWebApi","clientId","cancel","debounceTimeoutRef","handleLogout","removeItem","window","location","href","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuthContext","_s2","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/Auth/AuthProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport useAuth from \"./useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\n\n// Spotify web API is stateless, there are no server side sessions or storage.\n// The token will continue to work for within my site to make requests for 1 hour until it expires.\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children, code }) {\n  const accessToken = useAuth(code);\n  const setAccessToken = useState(\n    localStorage.getItem(\"accessToken\")\n  );\n  const [refreshToken, setRefreshToken] = useState(\n    localStorage.getItem(\"refreshToken\")\n  );\n\n  const spotifyApi = useRef(\n    new spotifyWebApi({\n      clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n    })\n  );\n\n  const cancel = useRef(false);\n  const debounceTimeoutRef = useRef(null);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    setAccessToken(null);\n    setRefreshToken(null);\n\n    window.location.href = \"/\";\n  };\n\n  return (\n    <AuthContext.Provider value={{ accessToken, refreshToken, handleLogout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuthContext() {\n  return useContext(AuthContext);\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,aAAa,MAAM,sBAAsB;;AAEhD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASS,YAAYA,CAAC;EAAEC,QAAQ;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC/C,MAAMC,WAAW,GAAGT,OAAO,CAACO,IAAI,CAAC;EACjC,MAAMG,cAAc,GAAGX,QAAQ,CAC7BY,YAAY,CAACC,OAAO,CAAC,aAAa,CACpC,CAAC;EACD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAC9CY,YAAY,CAACC,OAAO,CAAC,cAAc,CACrC,CAAC;EAED,MAAMG,UAAU,GAAGC,MAAM,CACvB,IAAIC,aAAa,CAAC;IAChBC,QAAQ,EAAE;EACZ,CAAC,CACH,CAAC;EAED,MAAMC,MAAM,GAAGH,MAAM,CAAC,KAAK,CAAC;EAC5B,MAAMI,kBAAkB,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAEvC,MAAMK,YAAY,GAAGA,CAAA,KAAM;IACzBV,YAAY,CAACW,UAAU,CAAC,aAAa,CAAC;IACtCX,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC;IACvCZ,cAAc,CAAC,IAAI,CAAC;IACpBI,eAAe,CAAC,IAAI,CAAC;IAErBS,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;EAC5B,CAAC;EAED,oBACEtB,OAAA,CAACC,WAAW,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAElB,WAAW;MAAEI,YAAY;MAAEQ;IAAa,CAAE;IAAAf,QAAA,EACtEA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACvB,EAAA,CAhCeH,YAAY;EAAA,QACNL,OAAO;AAAA;AAAAgC,EAAA,GADb3B,YAAY;AAkC5B,OAAO,SAAS4B,cAAcA,CAAA,EAAG;EAAAC,GAAA;EAC/B,OAAOrC,UAAU,CAACO,WAAW,CAAC;AAChC;AAAC8B,GAAA,CAFeD,cAAc;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}