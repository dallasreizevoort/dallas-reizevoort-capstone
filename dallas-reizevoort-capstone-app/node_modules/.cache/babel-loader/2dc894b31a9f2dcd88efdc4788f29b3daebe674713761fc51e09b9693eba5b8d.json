{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Genres/Genres.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport spotifyWebApi from 'spotify-web-api-node';\nimport SpotifyIcon from \"../../assets/images/Spotify_Icon_RGB_White.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Genres({\n  accessToken,\n  selectedTimeRange\n}) {\n  _s();\n  const [topGenresShort, setTopGenresShort] = useState([]);\n  const [topGenresMedium, setTopGenresMedium] = useState([]);\n  const [topGenresLong, setTopGenresLong] = useState([]);\n  const spotifyApi = useRef(new spotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  const calculateTopGenres = artists => {\n    const allGenres = artists.flatMap(artist => artist.genres);\n    const genreCounts = allGenres.reduce((counts, genre) => {\n      counts[genre] = (counts[genre] || 0) + 1;\n      return counts;\n    }, {});\n    return Object.entries(genreCounts).sort((a, b) => b[1] - a[1]).slice(0, 15);\n  };\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n    const timeRanges = [\"short_term\", \"medium_term\", \"long_term\"];\n    timeRanges.forEach(timeRange => {\n      spotifyApi.current.getMyTopArtists({\n        time_range: timeRange,\n        limit: 50\n      }).then(res => {\n        const topGenres = calculateTopGenres(res.body.items);\n        if (timeRange === \"short_term\") {\n          setTopGenresShort(topGenres);\n        } else if (timeRange === \"medium_term\") {\n          setTopGenresMedium(topGenres);\n        } else if (timeRange === \"long_term\") {\n          setTopGenresLong(topGenres);\n        }\n      });\n    });\n  }, [accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"genres\",\n    children: [selectedTimeRange === \"short_term\" && topGenresShort.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: topGenresShort.map(([genre, count], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"genres_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"genre__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"genre__rank\",\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"genre__title\",\n            children: genre\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          value: count,\n          max: Math.max(...topGenresShort.map(([_, count]) => count))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 19\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this))\n    }, void 0, false), selectedTimeRange === \"medium_term\" && topGenresMedium.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: topGenresMedium.map(([genre, count], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"genre\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"genre__rank\",\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"genre__title\",\n          children: genre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          value: count,\n          max: Math.max(...topGenresMedium.map(([_, count]) => count))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 19\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this))\n    }, void 0, false), selectedTimeRange === \"long_term\" && topGenresLong.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: topGenresLong.map(([genre, count], index) => (console.log(\"count\", count), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"genre\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"genre__rank\",\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"genre__title\",\n          children: genre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          value: count,\n          max: Math.max(...topGenresLong.map(([_, count]) => count))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 23\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)))\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(Genres, \"YxCgqr+CqD5RUrsbIKnqOLT7KwM=\");\n_c = Genres;\nexport default Genres;\nvar _c;\n$RefreshReg$(_c, \"Genres\");","map":{"version":3,"names":["React","useState","useEffect","useRef","spotifyWebApi","SpotifyIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","Genres","accessToken","selectedTimeRange","_s","topGenresShort","setTopGenresShort","topGenresMedium","setTopGenresMedium","topGenresLong","setTopGenresLong","spotifyApi","clientId","calculateTopGenres","artists","allGenres","flatMap","artist","genres","genreCounts","reduce","counts","genre","Object","entries","sort","a","b","slice","current","setAccessToken","timeRanges","forEach","timeRange","getMyTopArtists","time_range","limit","then","res","topGenres","body","items","className","children","length","map","count","index","fileName","_jsxFileName","lineNumber","columnNumber","value","max","Math","_","console","log","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Genres/Genres.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport spotifyWebApi from 'spotify-web-api-node';\nimport SpotifyIcon from \"../../assets/images/Spotify_Icon_RGB_White.png\";\n\nfunction Genres( {accessToken, selectedTimeRange}) {\n    const [topGenresShort, setTopGenresShort] = useState([]);\n    const [topGenresMedium, setTopGenresMedium] = useState([]);\n    const [topGenresLong, setTopGenresLong] = useState([]);\n\n    const spotifyApi = useRef(\n        new spotifyWebApi({\n            clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n        })\n    );\n\n    const calculateTopGenres = (artists) => {\n        const allGenres = artists.flatMap((artist) => artist.genres);\n        const genreCounts = allGenres.reduce((counts, genre) => {\n          counts[genre] = (counts[genre] || 0) + 1;\n          return counts;\n        }, {});\n        return Object.entries(genreCounts)\n          .sort((a, b) => b[1] - a[1])\n          .slice(0, 15);\n      };\n\n    useEffect(() => {\n      if (!accessToken) return;\n      spotifyApi.current.setAccessToken(accessToken);\n\n      const timeRanges = [\"short_term\", \"medium_term\", \"long_term\"];\n      timeRanges.forEach((timeRange) => {\n        spotifyApi.current\n          .getMyTopArtists({ time_range: timeRange, limit: 50 })\n          .then((res) => {\n            const topGenres = calculateTopGenres(res.body.items);\n            if (timeRange === \"short_term\") {\n              setTopGenresShort(topGenres);\n            } else if (timeRange === \"medium_term\") {\n              setTopGenresMedium(topGenres);\n            } else if (timeRange === \"long_term\") {\n              setTopGenresLong(topGenres);\n            }\n          });\n      });\n    }, [accessToken]);\n\n      return (\n        <div className=\"genres\">\n        {selectedTimeRange === \"short_term\" &&\n          topGenresShort.length > 0 && (\n            <>\n              {topGenresShort.map(([genre, count], index) => (\n                <div key={index} className=\"genres_wrapper\">\n                  <div className=\"genre__container\">\n                    <span className=\"genre__rank\">{index + 1}</span>\n                    <span className=\"genre__title\">{genre}</span>\n                  </div>\n                  <progress\n                    value={count}\n                    max={Math.max(\n                      ...topGenresShort.map(([_, count]) => count)\n                    )}\n                  ></progress>\n                </div>\n              ))}\n            </>\n          )}\n        {selectedTimeRange === \"medium_term\" &&\n          topGenresMedium.length > 0 && (\n            <>\n              {topGenresMedium.map(([genre, count], index) => (\n                <div key={index} className=\"genre\">\n                  <span className=\"genre__rank\">{index + 1}</span>\n                  <span className=\"genre__title\">{genre}</span>\n                  <progress\n                    value={count}\n                    max={Math.max(\n                      ...topGenresMedium.map(([_, count]) => count)\n                    )}\n                  ></progress>\n                </div>\n              ))}\n            </>\n          )}\n        {selectedTimeRange === \"long_term\" &&\n          topGenresLong.length > 0 && (\n            <>\n              {topGenresLong.map(\n                ([genre, count], index) => (\n                  console.log(\"count\", count),\n                  (\n                    <div key={index} className=\"genre\">\n                      <span className=\"genre__rank\">{index + 1}</span>\n                      <span className=\"genre__title\">{genre}</span>\n                      <progress\n                        value={count}\n                        max={Math.max(\n                          ...topGenresLong.map(([_, count]) => count)\n                        )}\n                      ></progress>\n                    </div>\n                  )\n                )\n              )}\n            </>\n          )}\n      </div>\n      )\n\n}\n\nexport default Genres;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}