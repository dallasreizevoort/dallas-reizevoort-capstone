{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/RecentlyPlayed/RecentlyPlayed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport spotifyWebApi from \"spotify-web-api-node\";\nimport SpotifyIcon from \"../../assets/images/Spotify_Icon_RGB_Green.png\";\nimport SpotifyPlayer from \"../SpotifyPlayer/SpotifyPlayer\";\nimport \"./RecentlyPlayed.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RecentlyPlayed({\n  accessToken\n}) {\n  _s();\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\n  const [playingTrackId, setPlayingTrackId] = useState(null);\n  const spotifyApi = useRef(new spotifyWebApi({\n    clientId: process.env.REACT_APP_CLIENT_ID\n  }));\n  const handlePlay = trackId => {\n    console.log(\"Playing track with ID:\", trackId);\n    setPlayingTrackId(trackId);\n  };\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n    spotifyApi.current.getMyRecentlyPlayedTracks().then(res => {\n      setRecentlyPlayed(res.body.items);\n    });\n  }, [accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recents\",\n    children: [playingTrackId && /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n      trackId: playingTrackId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 26\n    }, this), recentlyPlayed.map((track, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recents__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recent__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"recent__rank\",\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.track.album.images[0].url,\n          alt: track.track.name,\n          className: \"recent__image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"recent__title\",\n          children: track.track.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recent__container\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"recent__artist\",\n          children: [\" \", track.track.artists.map(artist => artist.name).join(\", \")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recent__link\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"recent__button\",\n          onClick: () => handlePlay(track.id),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: SpotifyIcon,\n            alt: \"Spotify Play Icon\",\n            className: \"recent__icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(RecentlyPlayed, \"icE0K5piWfHlgOf1z+NCQb+5S4s=\");\n_c = RecentlyPlayed;\nexport default RecentlyPlayed;\nvar _c;\n$RefreshReg$(_c, \"RecentlyPlayed\");","map":{"version":3,"names":["React","useState","useEffect","useRef","spotifyWebApi","SpotifyIcon","SpotifyPlayer","jsxDEV","_jsxDEV","RecentlyPlayed","accessToken","_s","recentlyPlayed","setRecentlyPlayed","playingTrackId","setPlayingTrackId","spotifyApi","clientId","process","env","REACT_APP_CLIENT_ID","handlePlay","trackId","console","log","current","setAccessToken","getMyRecentlyPlayedTracks","then","res","body","items","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","track","index","src","album","images","url","alt","name","artists","artist","join","onClick","id","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/RecentlyPlayed/RecentlyPlayed.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport spotifyWebApi from \"spotify-web-api-node\";\nimport SpotifyIcon from \"../../assets/images/Spotify_Icon_RGB_Green.png\";\nimport SpotifyPlayer from \"../SpotifyPlayer/SpotifyPlayer\";\nimport \"./RecentlyPlayed.scss\";\n\nfunction RecentlyPlayed({ accessToken }) {\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\n  const [playingTrackId, setPlayingTrackId] = useState(null);\n\n  const spotifyApi = useRef(\n    new spotifyWebApi({\n      clientId: process.env.REACT_APP_CLIENT_ID,\n    })\n  );\n\n  const handlePlay = (trackId) => {\n    console.log(\"Playing track with ID:\", trackId); \n    setPlayingTrackId(trackId);\n  };\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n\n    spotifyApi.current.getMyRecentlyPlayedTracks().then((res) => {\n      setRecentlyPlayed(res.body.items);\n    });\n  }, [accessToken]);\n\n  return (\n    <div className=\"recents\">\n      {playingTrackId && <SpotifyPlayer trackId={playingTrackId} />}\n      {recentlyPlayed.map((track, index) => (\n        <div key={index} className=\"recents__wrapper\">\n          <div className=\"recent__container\">\n            <span className=\"recent__rank\">{index + 1}</span>\n            <img\n              src={track.track.album.images[0].url}\n              alt={track.track.name}\n              className=\"recent__image\"\n            />\n            <span className=\"recent__title\">{track.track.name}</span>\n          </div>\n          <div className=\"recent__container\">\n            <span className=\"recent__artist\">\n              {\" \"}\n              {track.track.artists.map((artist) => artist.name).join(\", \")}\n            </span>\n          </div>\n          <div className=\"recent__link\">\n            <button\n              className=\"recent__button\"\n              onClick={() => handlePlay(track.id)}\n            >\n              <img\n                src={SpotifyIcon}\n                alt=\"Spotify Play Icon\"\n                className=\"recent__icon\"\n              />\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default RecentlyPlayed;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}