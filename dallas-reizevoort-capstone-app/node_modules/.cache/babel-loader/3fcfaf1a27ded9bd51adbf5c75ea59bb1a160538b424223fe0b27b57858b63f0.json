{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Playlist({\n  accessToken\n}) {\n  _s();\n  const [userID, setUserID] = useState();\n  const [playlist, setPlaylist] = useState(null); // New state variable for the playlist\n\n  const spotifyApi = useRef(new SpotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  useEffect(playlist => {\n    console.log('Playlist state:', playlist);\n  }, [playlist]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Get the user's ID\n    spotifyApi.current.getMe().then(res => {\n      setUserID(res.body.id);\n      console.log('User ID:', res.body.id); // Log the user ID\n    });\n  }, [accessToken]);\n\n  // Cant use callbacks here, playlist stays undefined\n  const createPlaylist = async () => {\n    try {\n      // Get the user's top tracks\n      const topTracksResponse = await spotifyApi.current.getMyTopTracks({\n        limit: 5\n      });\n      const trackIds = topTracksResponse.body.items.map(track => track.id);\n\n      // Get recommendations based on these tracks\n      const recommendationsResponse = await spotifyApi.current.getRecommendations({\n        seed_tracks: trackIds\n      });\n      const trackUris = recommendationsResponse.body.tracks.map(track => track.uri);\n\n      // Create a new playlist\n      const playlistData = await spotifyApi.current.createPlaylist('New Playlist', {\n        'public': false\n      });\n      const playlistId = playlistData.body.id;\n\n      // Add tracks to the playlist\n      await spotifyApi.current.addTracksToPlaylist(playlistId, trackUris);\n\n      // Fetch the playlist data\n      const data = await spotifyApi.current.getPlaylist(playlistId);\n      setPlaylist(data.body); // Update the playlist state\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard__playlist\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createPlaylist,\n      children: \"Create Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), playlist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: playlist.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: playlist.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), playlist.tracks && playlist.tracks.items && playlist.tracks.items.length > 0 ? playlist.tracks.items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [item.track.name, \" by \", item.track.artists[0].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tracks in playlist.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"No playlist data to display. Playlist state: \", JSON.stringify(playlist)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(Playlist, \"NThmt4UO3MoWJvSuO70MiW9ydkQ=\");\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SpotifyWebApi","jsxDEV","_jsxDEV","Playlist","accessToken","_s","userID","setUserID","playlist","setPlaylist","spotifyApi","clientId","console","log","current","setAccessToken","getMe","then","res","body","id","createPlaylist","topTracksResponse","getMyTopTracks","limit","trackIds","items","map","track","recommendationsResponse","getRecommendations","seed_tracks","trackUris","tracks","uri","playlistData","playlistId","addTracksToPlaylist","data","getPlaylist","err","error","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","name","description","length","item","index","artists","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nfunction Playlist({ accessToken }) {\n    const [userID, setUserID] = useState();\n    const [playlist, setPlaylist] = useState(null); // New state variable for the playlist\n\n    const spotifyApi = useRef(\n        new SpotifyWebApi({\n            clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n        })\n    );\n\n    useEffect((playlist) => {\n        console.log('Playlist state:', playlist);\n    }, [playlist]);\n\n    \n\n    useEffect(() => {\n        if (!accessToken) return;\n        spotifyApi.current.setAccessToken(accessToken);\n    \n        // Get the user's ID\n        spotifyApi.current.getMe().then((res) => {\n            setUserID(res.body.id);\n            console.log('User ID:', res.body.id); // Log the user ID\n        });\n    }, [accessToken]);\n    \n\n\n    // Cant use callbacks here, playlist stays undefined\n    const createPlaylist = async () => {\n        try {\n            // Get the user's top tracks\n            const topTracksResponse = await spotifyApi.current.getMyTopTracks({ limit: 5 });\n            const trackIds = topTracksResponse.body.items.map(track => track.id);\n    \n            // Get recommendations based on these tracks\n            const recommendationsResponse = await spotifyApi.current.getRecommendations({ seed_tracks: trackIds });\n            const trackUris = recommendationsResponse.body.tracks.map(track => track.uri);\n    \n            // Create a new playlist\n            const playlistData = await spotifyApi.current.createPlaylist('New Playlist', { 'public' : false });\n            const playlistId = playlistData.body.id;\n    \n            // Add tracks to the playlist\n            await spotifyApi.current.addTracksToPlaylist(playlistId, trackUris);\n    \n            // Fetch the playlist data\n            const data = await spotifyApi.current.getPlaylist(playlistId);\n            setPlaylist(data.body); // Update the playlist state\n        } catch (err) {\n            console.error('Error:', err);\n        }\n    };\n\n \n\n    return (\n        <div className=\"dashboard__playlist\">\n        <button onClick={createPlaylist}>Create Playlist</button>\n        \n        {playlist ? (\n            <div>\n                <h2>{playlist.name}</h2>\n                <p>{playlist.description}</p>\n                {/* Render the playlist tracks */}\n                {playlist.tracks && playlist.tracks.items && playlist.tracks.items.length > 0 ? (\n                    playlist.tracks.items.map((item, index) => (\n                        <div key={index}>\n                            <p>{item.track.name} by {item.track.artists[0].name}</p>\n                        </div>\n                    ))\n                ) : (\n                    <p>No tracks in playlist.</p>\n                )}\n            </div>\n        ) : (\n            <p>No playlist data to display. Playlist state: {JSON.stringify(playlist)}</p>\n        )}\n    </div>\n);\n    \n}\n\nexport default Playlist;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}