{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Mood/Mood.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Mood({\n  accessToken\n}) {\n  _s();\n  const spotifyApi = useRef(new SpotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  const [moodData, setMoodData] = React.useState([]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n    spotifyApi.current.getMyRecentlyPlayedTracks({\n      limit: 50\n    }).then(response => {\n      const trackIds = response.body.items.map(item => item.track.id);\n      return spotifyApi.current.getAudioFeaturesForTracks(trackIds);\n    }).then(response => {\n      const audioFeatures = response.body.audio_features;\n      const data = audioFeatures.map((features, index) => [new Date(new Date().getTime() - index * 1000 * 60 * 60 * 24),\n      // Convert timestamp to date object\n      features.valence]);\n      setMoodData([['Time', 'Mood (valence)'], ...data]);\n    }).catch(err => {\n      console.error(\"Something went wrong:\", err);\n    });\n  }, [accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        left: '10px',\n        top: '50%',\n        transform: 'translateY(-50%) rotate(-90deg)',\n        color: '#FFFFFF',\n        fontFamily: 'Gotham',\n        fontSize: '13px'\n      },\n      children: \"Mood (valence)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      width: '500px',\n      height: '300px',\n      chartType: \"LineChart\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this),\n      data: moodData,\n      options: {\n        backgroundColor: '#191414',\n        fontName: 'Gotham',\n        fontSize: 13,\n        hAxis: {\n          title: 'Time',\n          format: 'MMM d, y',\n          titleTextStyle: {\n            color: '#FFFFFF'\n          },\n          textStyle: {\n            color: '#FFFFFF'\n          },\n          gridlines: {\n            color: 'transparent'\n          } // Hide gridlines\n        },\n        vAxis: {\n          title: '',\n          // Remove original title\n          titleTextStyle: {\n            color: '#FFFFFF'\n          },\n          textStyle: {\n            color: '#FFFFFF'\n          },\n          gridlines: {\n            color: 'transparent'\n          } // Hide gridlines\n        },\n        legend: {\n          textStyle: {\n            color: '#FFFFFF'\n          }\n        },\n        colors: ['#a52714', '#097138'] // Change line colors here\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Mood, \"P/czS0QsRCc7DaqmI2r50kgHues=\");\n_c = Mood;\nexport default Mood;\nvar _c;\n$RefreshReg$(_c, \"Mood\");","map":{"version":3,"names":["React","useEffect","useRef","SpotifyWebApi","Chart","jsxDEV","_jsxDEV","Mood","accessToken","_s","spotifyApi","clientId","moodData","setMoodData","useState","current","setAccessToken","getMyRecentlyPlayedTracks","limit","then","response","trackIds","body","items","map","item","track","id","getAudioFeaturesForTracks","audioFeatures","audio_features","data","features","index","Date","getTime","valence","catch","err","console","error","style","position","children","left","top","transform","color","fontFamily","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","width","height","chartType","loader","options","backgroundColor","fontName","hAxis","title","format","titleTextStyle","textStyle","gridlines","vAxis","legend","colors","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Mood/Mood.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport { Chart } from \"react-google-charts\";\n\nfunction Mood({ accessToken }) {\n  const spotifyApi = useRef(\n    new SpotifyWebApi({\n      clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n    })\n  );\n\n  const [moodData, setMoodData] = React.useState([]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n    spotifyApi.current\n      .getMyRecentlyPlayedTracks({ limit: 50 })\n      .then((response) => {\n        const trackIds = response.body.items.map(item => item.track.id);\n        return spotifyApi.current.getAudioFeaturesForTracks(trackIds);\n      })\n      .then((response) => {\n        const audioFeatures = response.body.audio_features;\n\n        const data = audioFeatures.map((features, index) => ([\n          new Date(new Date().getTime() - index * 1000 * 60 * 60 * 24), // Convert timestamp to date object\n          features.valence,\n        ]));\n\n        setMoodData([['Time', 'Mood (valence)'], ...data]);\n      })\n      .catch((err) => {\n        console.error(\"Something went wrong:\", err);\n      });\n  }, [accessToken]);\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <div style={{ \n        position: 'absolute', \n        left: '10px', \n        top: '50%', \n        transform: 'translateY(-50%) rotate(-90deg)', \n        color: '#FFFFFF',\n        fontFamily: 'Gotham',\n        fontSize: '13px'\n      }}>\n        Mood (valence)\n      </div>\n      <Chart\n        width={'500px'}\n        height={'300px'}\n        chartType=\"LineChart\"\n        loader={<div>Loading Chart</div>}\n        data={moodData}\n        options={{\n          backgroundColor: '#191414',\n          fontName: 'Gotham',\n          fontSize: 13,\n          hAxis: {\n            title: 'Time',\n            format: 'MMM d, y',\n            titleTextStyle: { color: '#FFFFFF' },\n            textStyle: { color: '#FFFFFF' },\n            gridlines: { color: 'transparent' }, // Hide gridlines\n          },\n          vAxis: {\n            title: '', // Remove original title\n            titleTextStyle: { color: '#FFFFFF' },\n            textStyle: { color: '#FFFFFF' },\n            gridlines: { color: 'transparent' }, // Hide gridlines\n          },\n          legend: { textStyle: { color: '#FFFFFF' } },\n          colors: ['#a52714', '#097138'], // Change line colors here\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Mood;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}