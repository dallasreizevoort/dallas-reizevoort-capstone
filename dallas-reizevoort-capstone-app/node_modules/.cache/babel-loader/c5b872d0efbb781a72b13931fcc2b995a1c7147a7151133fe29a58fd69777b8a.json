{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport SpotifyPlayIcon from \"../../assets/images/Spotify_Play.png\";\nimport SpotifyPlayer from '../SpotifyPlayer/SpotifyPlayer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Playlist({\n  accessToken\n}) {\n  _s();\n  const [userID, setUserID] = useState();\n  const [playlist, setPlaylist] = useState(null); // New state variable for the playlist\n  const [newPlaylist, setNewPlaylist] = useState(null);\n  const [playlistDescription, setPlaylistDescription] = useState('');\n  const [playingTrackId, setPlayingTrackId] = useState(null);\n  const spotifyApi = useRef(new SpotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  useEffect(playlist => {\n    console.log('Playlist state:', playlist);\n  }, [playlist]);\n  const handlePlay = trackId => {\n    console.log('Playing track with ID:', trackId); // Add this line\n    setPlayingTrackId(trackId);\n  };\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Get the user's ID\n    spotifyApi.current.getMe().then(res => {\n      setUserID(res.body.id);\n      console.log('User ID:', res.body.id); // Log the user ID\n    });\n  }, [accessToken]);\n\n  // Cant use callbacks here, playlist stays undefined\n  const createPlaylist = async () => {\n    try {\n      // Get the user's top tracks\n      const topTracksResponse = await spotifyApi.current.getMyTopTracks({\n        limit: 5\n      });\n      const trackIds = topTracksResponse.body.items.map(track => track.id);\n\n      // Get recommendations based on these tracks\n      const recommendationsResponse = await spotifyApi.current.getRecommendations({\n        seed_tracks: trackIds\n      });\n      const tracks = recommendationsResponse.body.tracks.map(track => ({\n        uri: track.uri,\n        name: track.name,\n        artist: track.artists[0].name,\n        artwork: track.album.images[0].url\n      }));\n\n      // Create a new playlist in the state\n      setNewPlaylist({\n        name: 'New Playlist',\n        tracks\n      });\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n  const savePlaylist = async () => {\n    try {\n      // Create a new playlist on Spotify\n      const playlistData = await spotifyApi.current.createPlaylist(userID, newPlaylist.name, {\n        'public': false,\n        'description': playlistDescription\n      });\n      const playlistId = playlistData.body.id;\n\n      // Add tracks to the playlist\n      await spotifyApi.current.addTracksToPlaylist(playlistId, newPlaylist.tracks);\n\n      // Fetch the playlist data\n      const data = await spotifyApi.current.getPlaylist(playlistId);\n      setPlaylist(data.body); // Update the playlist state\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard__playlist\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createPlaylist,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this), newPlaylist && newPlaylist.tracks && newPlaylist.tracks.length > 0 ? newPlaylist.tracks.map((track, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: track.artwork,\n        alt: track.name,\n        className: \"playlist__track\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"playlist__title\",\n        children: [track.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"playlist__artist\",\n          children: [track.artist, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track__link\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handlePlay(track.id),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: SpotifyPlayIcon,\n              alt: \"Spotify Play Icon\",\n              className: \"track__icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 3\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tracks in playlist.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter a description\",\n      onChange: e => setPlaylistDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: savePlaylist,\n      children: \"Save to Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 1\n  }, this);\n}\n_s(Playlist, \"5hQFtyvrDTAXBi1AQzjMJLo743Y=\");\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SpotifyWebApi","SpotifyPlayIcon","SpotifyPlayer","jsxDEV","_jsxDEV","Playlist","accessToken","_s","userID","setUserID","playlist","setPlaylist","newPlaylist","setNewPlaylist","playlistDescription","setPlaylistDescription","playingTrackId","setPlayingTrackId","spotifyApi","clientId","console","log","handlePlay","trackId","current","setAccessToken","getMe","then","res","body","id","createPlaylist","topTracksResponse","getMyTopTracks","limit","trackIds","items","map","track","recommendationsResponse","getRecommendations","seed_tracks","tracks","uri","name","artist","artists","artwork","album","images","url","err","error","savePlaylist","playlistData","playlistId","addTracksToPlaylist","data","getPlaylist","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","index","src","alt","type","placeholder","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport SpotifyPlayIcon from \"../../assets/images/Spotify_Play.png\";\nimport SpotifyPlayer from '../SpotifyPlayer/SpotifyPlayer';\n\nfunction Playlist({ accessToken }) {\n    const [userID, setUserID] = useState();\n    const [playlist, setPlaylist] = useState(null); // New state variable for the playlist\n    const [newPlaylist, setNewPlaylist] = useState(null);\n    const [playlistDescription, setPlaylistDescription] = useState('');\n    const [playingTrackId, setPlayingTrackId] = useState(null);\n\n    const spotifyApi = useRef(\n        new SpotifyWebApi({\n            clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n        })\n    );\n\n    useEffect((playlist) => {\n        console.log('Playlist state:', playlist);\n    }, [playlist]);\n\n    const handlePlay = (trackId) => {\n        console.log('Playing track with ID:', trackId); // Add this line\n        setPlayingTrackId(trackId);\n    };\n\n    \n\n    useEffect(() => {\n        if (!accessToken) return;\n        spotifyApi.current.setAccessToken(accessToken);\n    \n        // Get the user's ID\n        spotifyApi.current.getMe().then((res) => {\n            setUserID(res.body.id);\n            console.log('User ID:', res.body.id); // Log the user ID\n        });\n    }, [accessToken]);\n    \n\n\n    // Cant use callbacks here, playlist stays undefined\n    const createPlaylist = async () => {\n        try {\n            // Get the user's top tracks\n            const topTracksResponse = await spotifyApi.current.getMyTopTracks({ limit: 5 });\n            const trackIds = topTracksResponse.body.items.map(track => track.id);\n    \n            // Get recommendations based on these tracks\n            const recommendationsResponse = await spotifyApi.current.getRecommendations({ seed_tracks: trackIds });\n            const tracks = recommendationsResponse.body.tracks.map(track => ({\n                uri: track.uri,\n                name: track.name,\n                artist: track.artists[0].name,\n                artwork: track.album.images[0].url,\n            }));\n    \n            // Create a new playlist in the state\n            setNewPlaylist({ name: 'New Playlist', tracks });\n        } catch (err) {\n            console.error('Error:', err);\n        }\n    };\n\n    const savePlaylist = async () => {\n        try {\n            // Create a new playlist on Spotify\n            const playlistData = await spotifyApi.current.createPlaylist(userID, newPlaylist.name, { 'public' : false, 'description': playlistDescription });\n            const playlistId = playlistData.body.id;\n    \n            // Add tracks to the playlist\n            await spotifyApi.current.addTracksToPlaylist(playlistId, newPlaylist.tracks);\n    \n            // Fetch the playlist data\n            const data = await spotifyApi.current.getPlaylist(playlistId);\n            setPlaylist(data.body); // Update the playlist state\n        } catch (err) {\n            console.error('Error:', err);\n        }\n    };\n\n \n\n    return (\n<div className=\"dashboard__playlist\">\n    <button onClick={createPlaylist}>Create</button>\n    {newPlaylist && newPlaylist.tracks && newPlaylist.tracks.length > 0 ? (\n        newPlaylist.tracks.map((track, index) => (\n            <div key={index} className=\"playlist\">\n                <img src={track.artwork} alt={track.name} className=\"playlist__track\" />\n                <span className=\"playlist__title\">{track.name} </span>\n                <div className=\"playlist__container\">\n                    <span className=\"playlist__artist\">{track.artist} </span>\n                    <div className=\"track__link\">\n  <button onClick={() => handlePlay(track.id)}>\n    <img\n      src={SpotifyPlayIcon}\n      alt=\"Spotify Play Icon\"\n      className=\"track__icon\"\n    />\n  </button>\n</div>\n                </div>\n            </div>\n        ))\n    ) : (\n        <p>No tracks in playlist.</p>\n    )}\n    <input type=\"text\" placeholder=\"Enter a description\" onChange={e => setPlaylistDescription(e.target.value)} />\n    <button onClick={savePlaylist}>Save to Spotify</button>\n</div>\n);\n    \n}\n\nexport default Playlist;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}