{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Playlist({\n  accessToken\n}) {\n  _s2();\n  const [userID, setUserID] = useState();\n  const [playlist, setPlaylist] = useState(null); // New state variable for the playlist\n\n  const spotifyApi = useRef(new SpotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  useEffect(() => {\n    console.log('Playlist state:', playlist);\n  }, [playlist]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Get the user's ID\n    spotifyApi.current.getMe().then(res => {\n      setUserID(res.body.id);\n      console.log('User ID:', res.body.id); // Log the user ID\n    });\n  }, [accessToken]);\n  const createPlaylist = async () => {\n    // Get the user's top tracks\n    const topTracksResponse = await spotifyApi.current.getMyTopTracks({\n      limit: 5\n    });\n    console.log('Top Tracks Response:', topTracksResponse); // Log the top tracks response\n    const trackIds = topTracksResponse.body.items.map(track => track.id);\n\n    // Get recommendations based on these tracks\n    const recommendationsResponse = await spotifyApi.current.getRecommendations({\n      seed_tracks: trackIds\n    });\n    console.log('Recommendations Response:', recommendationsResponse); // Log the recommendations response\n    const trackUris = recommendationsResponse.body.tracks.map(track => track.uri);\n\n    // Create a new playlist\n    spotifyApi.current.createPlaylist('New Playlist', {\n      'public': false\n    }, async (err, data) => {\n      var _s = $RefreshSig$();\n      if (err) {\n        console.error('Error creating playlist:', err);\n        return;\n      }\n      const playlistId = data.body.id;\n      console.log('Playlist ID:', playlistId); // Log the playlist ID\n      _s(spotifyApi.current.addTracksToPlaylist(playlistId, trackUris, _s((err, data) => {\n        _s();\n        if (err) {\n          console.error('Error adding tracks to playlist:', err); // Log any errors\n          return;\n        }\n        console.log('Created playlist!');\n        console.log('AddTracksToPlaylist data:', data); // Log the data from addTracksToPlaylist\n\n        // Fetch the playlist data\n        spotifyApi.current.getPlaylist(playlistId).then(data => {\n          console.log('Fetched playlist data:', data.body); // Log the fetched playlist data\n          setPlaylist(data.body); // Update the playlist state\n          console.log('Playlist state after setting:', playlist); // Log the playlist state after setting it\n        }, err => {\n          console.error('Error fetching playlist:', err);\n        });\n        useEffect(() => {\n          console.log('Playlist state:', playlist);\n        }, [playlist]);\n      }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard__playlist\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createPlaylist,\n      children: \"Create Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), playlist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: playlist.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: playlist.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), playlist.tracks.items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [item.track.name, \" by \", item.track.artists[0].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"No playlist data to display. Playlist state: \", JSON.stringify(playlist)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s2(Playlist, \"NThmt4UO3MoWJvSuO70MiW9ydkQ=\");\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SpotifyWebApi","jsxDEV","_jsxDEV","Playlist","accessToken","_s2","userID","setUserID","playlist","setPlaylist","spotifyApi","clientId","console","log","current","setAccessToken","getMe","then","res","body","id","createPlaylist","topTracksResponse","getMyTopTracks","limit","trackIds","items","map","track","recommendationsResponse","getRecommendations","seed_tracks","trackUris","tracks","uri","err","data","_s","$RefreshSig$","error","playlistId","addTracksToPlaylist","getPlaylist","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","name","description","item","index","artists","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nfunction Playlist({ accessToken }) {\n    const [userID, setUserID] = useState();\n    const [playlist, setPlaylist] = useState(null); // New state variable for the playlist\n\n    const spotifyApi = useRef(\n        new SpotifyWebApi({\n            clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n        })\n    );\n\n    useEffect(() => {\n        console.log('Playlist state:', playlist);\n    }, [playlist]);\n\n    useEffect(() => {\n        if (!accessToken) return;\n        spotifyApi.current.setAccessToken(accessToken);\n    \n        // Get the user's ID\n        spotifyApi.current.getMe().then((res) => {\n            setUserID(res.body.id);\n            console.log('User ID:', res.body.id); // Log the user ID\n        });\n    }, [accessToken]);\n    \n    const createPlaylist = async () => {\n        // Get the user's top tracks\n        const topTracksResponse = await spotifyApi.current.getMyTopTracks({ limit: 5 });\n        console.log('Top Tracks Response:', topTracksResponse); // Log the top tracks response\n        const trackIds = topTracksResponse.body.items.map(track => track.id);\n    \n        // Get recommendations based on these tracks\n        const recommendationsResponse = await spotifyApi.current.getRecommendations({ seed_tracks: trackIds });\n        console.log('Recommendations Response:', recommendationsResponse); // Log the recommendations response\n        const trackUris = recommendationsResponse.body.tracks.map(track => track.uri);\n    \n        // Create a new playlist\n        spotifyApi.current.createPlaylist('New Playlist', { 'public' : false }, async (err, data) => {\n            if (err) {\n                console.error('Error creating playlist:', err);\n                return;\n            }\n    \n            const playlistId = data.body.id;\n            console.log('Playlist ID:', playlistId); // Log the playlist ID\n            spotifyApi.current.addTracksToPlaylist(playlistId, trackUris, (err, data) => {\n                if (err) {\n                    console.error('Error adding tracks to playlist:', err); // Log any errors\n                    return;\n                }\n            \n                console.log('Created playlist!');\n                console.log('AddTracksToPlaylist data:', data); // Log the data from addTracksToPlaylist\n            \n                // Fetch the playlist data\n                spotifyApi.current.getPlaylist(playlistId)\n                .then((data) => {\n                    console.log('Fetched playlist data:', data.body); // Log the fetched playlist data\n                    setPlaylist(data.body); // Update the playlist state\n                    console.log('Playlist state after setting:', playlist); // Log the playlist state after setting it\n                }, (err) => {\n                    console.error('Error fetching playlist:', err);\n                });\n\n\nuseEffect(() => {\n    console.log('Playlist state:', playlist);\n}, [playlist]);\n\n\n            });\n        });\n    };\n\n \n\n    return (\n        <div className=\"dashboard__playlist\">\n            <button onClick={createPlaylist}>Create Playlist</button>\n            \n            {playlist ? (\n    <div>\n        <h2>{playlist.name}</h2>\n        <p>{playlist.description}</p>\n        {/* Render the playlist tracks */}\n        {playlist.tracks.items.map((item, index) => (\n            <div key={index}>\n                <p>{item.track.name} by {item.track.artists[0].name}</p>\n            </div>\n        ))}\n    </div>\n) : (\n    <p>No playlist data to display. Playlist state: {JSON.stringify(playlist)}</p>\n)}\n        </div>\n    );\n}\n\nexport default Playlist;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}