{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Mood/Mood.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Mood({\n  accessToken\n}) {\n  _s();\n  const [moodData, setMoodData] = useState([]);\n  const spotifyApi = useRef(new SpotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  useEffect(() => {\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Fetch the user's listening history\n    spotifyApi.current.getMyRecentlyPlayedTracks({\n      limit: 50\n    }).then(response => {\n      const tracks = response.body.items;\n\n      // Get the audio features for these tracks\n      return spotifyApi.current.getAudioFeaturesForTracks(tracks.map(track => track.track.id));\n    }).then(response => {\n      const audioFeatures = response.body.audio_features;\n\n      // Store the mood data in a time-series format\n      const moodData = audioFeatures.map((features, index) => ({\n        x: new Date().getTime() - index * 1000 * 60 * 60,\n        // This is a placeholder. You should use the actual play time of each track.\n        y: features.valence\n      }));\n      setMoodData(moodData);\n    }).catch(err => {\n      console.error('Something went wrong:', err);\n    });\n  }, [accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          label: 'Mood over time',\n          data: moodData,\n          fill: false,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day'\n            }\n          },\n          y: {\n            min: 0,\n            max: 1,\n            title: {\n              display: true,\n              text: 'Mood (valence)'\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(Mood, \"czNPcDvcJb9hR7E6/ZNQt2qNV1k=\");\n_c = Mood;\nexport default Mood;\nvar _c;\n$RefreshReg$(_c, \"Mood\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SpotifyWebApi","Line","jsxDEV","_jsxDEV","Mood","accessToken","_s","moodData","setMoodData","spotifyApi","clientId","current","setAccessToken","getMyRecentlyPlayedTracks","limit","then","response","tracks","body","items","getAudioFeaturesForTracks","map","track","id","audioFeatures","audio_features","features","index","x","Date","getTime","y","valence","catch","err","console","error","children","data","datasets","label","fill","borderColor","tension","options","scales","type","time","unit","min","max","title","display","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Mood/Mood.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\nfunction Mood({ accessToken }) {\n    const [moodData, setMoodData] = useState([]);\n    const spotifyApi = useRef(\n        new SpotifyWebApi({\n            clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n        })\n    );\n\n    useEffect(() => {\n        spotifyApi.current.setAccessToken(accessToken);\n\n        // Fetch the user's listening history\n        spotifyApi.current.getMyRecentlyPlayedTracks({ limit: 50 })\n            .then(response => {\n                const tracks = response.body.items;\n\n                // Get the audio features for these tracks\n                return spotifyApi.current.getAudioFeaturesForTracks(tracks.map(track => track.track.id));\n            })\n            .then(response => {\n                const audioFeatures = response.body.audio_features;\n\n                // Store the mood data in a time-series format\n                const moodData = audioFeatures.map((features, index) => ({\n                    x: new Date().getTime() - index * 1000 * 60 * 60, // This is a placeholder. You should use the actual play time of each track.\n                    y: features.valence\n                }));\n\n                setMoodData(moodData);\n            })\n            .catch(err => {\n                console.error('Something went wrong:', err);\n            });\n    }, [accessToken]);\n\n    return (\n        <div>\n            <Line\n                data={{\n                    datasets: [{\n                        label: 'Mood over time',\n                        data: moodData,\n                        fill: false,\n                        borderColor: 'rgb(75, 192, 192)',\n                        tension: 0.1\n                    }]\n                }}\n                options={{\n                    scales: {\n                        x: {\n                            type: 'time',\n                            time: {\n                                unit: 'day'\n                            }\n                        },\n                        y: {\n                            min: 0,\n                            max: 1,\n                            title: {\n                                display: true,\n                                text: 'Mood (valence)'\n                            }\n                        }\n                    }\n                }}\n            />\n        </div>\n    );\n}\n\nexport default Mood;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,aAAa,MAAM,sBAAsB;AAChD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,IAAIA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMY,UAAU,GAAGV,MAAM,CACrB,IAAIC,aAAa,CAAC;IACdU,QAAQ,EAAE;EACd,CAAC,CACL,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACZW,UAAU,CAACE,OAAO,CAACC,cAAc,CAACP,WAAW,CAAC;;IAE9C;IACAI,UAAU,CAACE,OAAO,CAACE,yBAAyB,CAAC;MAAEC,KAAK,EAAE;IAAG,CAAC,CAAC,CACtDC,IAAI,CAACC,QAAQ,IAAI;MACd,MAAMC,MAAM,GAAGD,QAAQ,CAACE,IAAI,CAACC,KAAK;;MAElC;MACA,OAAOV,UAAU,CAACE,OAAO,CAACS,yBAAyB,CAACH,MAAM,CAACI,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACC,EAAE,CAAC,CAAC;IAC5F,CAAC,CAAC,CACDR,IAAI,CAACC,QAAQ,IAAI;MACd,MAAMQ,aAAa,GAAGR,QAAQ,CAACE,IAAI,CAACO,cAAc;;MAElD;MACA,MAAMlB,QAAQ,GAAGiB,aAAa,CAACH,GAAG,CAAC,CAACK,QAAQ,EAAEC,KAAK,MAAM;QACrDC,CAAC,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGH,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE;QAAE;QAClDI,CAAC,EAAEL,QAAQ,CAACM;MAChB,CAAC,CAAC,CAAC;MAEHxB,WAAW,CAACD,QAAQ,CAAC;IACzB,CAAC,CAAC,CACD0B,KAAK,CAACC,GAAG,IAAI;MACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;IAC/C,CAAC,CAAC;EACV,CAAC,EAAE,CAAC7B,WAAW,CAAC,CAAC;EAEjB,oBACIF,OAAA;IAAAkC,QAAA,eACIlC,OAAA,CAACF,IAAI;MACDqC,IAAI,EAAE;QACFC,QAAQ,EAAE,CAAC;UACPC,KAAK,EAAE,gBAAgB;UACvBF,IAAI,EAAE/B,QAAQ;UACdkC,IAAI,EAAE,KAAK;UACXC,WAAW,EAAE,mBAAmB;UAChCC,OAAO,EAAE;QACb,CAAC;MACL,CAAE;MACFC,OAAO,EAAE;QACLC,MAAM,EAAE;UACJjB,CAAC,EAAE;YACCkB,IAAI,EAAE,MAAM;YACZC,IAAI,EAAE;cACFC,IAAI,EAAE;YACV;UACJ,CAAC;UACDjB,CAAC,EAAE;YACCkB,GAAG,EAAE,CAAC;YACNC,GAAG,EAAE,CAAC;YACNC,KAAK,EAAE;cACHC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACV;UACJ;QACJ;MACJ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACnD,EAAA,CApEQF,IAAI;AAAAsD,EAAA,GAAJtD,IAAI;AAsEb,eAAeA,IAAI;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}