{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Playlist({\n  accessToken\n}) {\n  _s();\n  const [userID, setUserID] = useState();\n  const [playlist, setPlaylist] = useState(null); // New state variable for the playlist\n  const [newPlaylist, setNewPlaylist] = useState(null);\n  const [playlistDescription, setPlaylistDescription] = useState('');\n  const spotifyApi = useRef(new SpotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  useEffect(playlist => {\n    console.log('Playlist state:', playlist);\n  }, [playlist]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Get the user's ID\n    spotifyApi.current.getMe().then(res => {\n      setUserID(res.body.id);\n      console.log('User ID:', res.body.id); // Log the user ID\n    });\n  }, [accessToken]);\n\n  // Cant use callbacks here, playlist stays undefined\n  const createPlaylist = async () => {\n    try {\n      // Get the user's top tracks\n      const topTracksResponse = await spotifyApi.current.getMyTopTracks({\n        limit: 5\n      });\n      const trackIds = topTracksResponse.body.items.map(track => track.id);\n\n      // Get recommendations based on these tracks\n      const recommendationsResponse = await spotifyApi.current.getRecommendations({\n        seed_tracks: trackIds\n      });\n      const tracks = recommendationsResponse.body.tracks.map(track => ({\n        uri: track.uri,\n        name: track.name,\n        artist: track.artists[0].name,\n        artwork: track.album.images[0].url\n      }));\n\n      // Create a new playlist in the state\n      setNewPlaylist({\n        name: 'New Playlist',\n        tracks\n      });\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n  const savePlaylist = async () => {\n    try {\n      // Create a new playlist on Spotify\n      const playlistData = await spotifyApi.current.createPlaylist(userID, newPlaylist.name, {\n        'public': false,\n        'description': playlistDescription\n      });\n      const playlistId = playlistData.body.id;\n\n      // Add tracks to the playlist\n      await spotifyApi.current.addTracksToPlaylist(playlistId, newPlaylist.tracks);\n\n      // Fetch the playlist data\n      const data = await spotifyApi.current.getPlaylist(playlistId);\n      setPlaylist(data.body); // Update the playlist state\n    } catch (err) {\n      console.error('Error:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard__playlist\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createPlaylist,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), newPlaylist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: newPlaylist.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), newPlaylist.tracks && newPlaylist.tracks.length > 0 ? newPlaylist.tracks.map((track, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.artwork,\n          alt: track.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [track.name, \" by \", track.artist]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tracks in playlist.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter a description\",\n        onChange: e => setPlaylistDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: savePlaylist,\n        children: \"Save to Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No new playlist data to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_s(Playlist, \"q0NzaA4OOi7iStqf77cDI+uu2ow=\");\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SpotifyWebApi","jsxDEV","_jsxDEV","Playlist","accessToken","_s","userID","setUserID","playlist","setPlaylist","newPlaylist","setNewPlaylist","playlistDescription","setPlaylistDescription","spotifyApi","clientId","console","log","current","setAccessToken","getMe","then","res","body","id","createPlaylist","topTracksResponse","getMyTopTracks","limit","trackIds","items","map","track","recommendationsResponse","getRecommendations","seed_tracks","tracks","uri","name","artist","artists","artwork","album","images","url","err","error","savePlaylist","playlistData","playlistId","addTracksToPlaylist","data","getPlaylist","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","index","src","alt","type","placeholder","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nfunction Playlist({ accessToken }) {\n    const [userID, setUserID] = useState();\n    const [playlist, setPlaylist] = useState(null); // New state variable for the playlist\n    const [newPlaylist, setNewPlaylist] = useState(null);\n    const [playlistDescription, setPlaylistDescription] = useState('');\n\n    const spotifyApi = useRef(\n        new SpotifyWebApi({\n            clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n        })\n    );\n\n    useEffect((playlist) => {\n        console.log('Playlist state:', playlist);\n    }, [playlist]);\n\n    \n\n    useEffect(() => {\n        if (!accessToken) return;\n        spotifyApi.current.setAccessToken(accessToken);\n    \n        // Get the user's ID\n        spotifyApi.current.getMe().then((res) => {\n            setUserID(res.body.id);\n            console.log('User ID:', res.body.id); // Log the user ID\n        });\n    }, [accessToken]);\n    \n\n\n    // Cant use callbacks here, playlist stays undefined\n    const createPlaylist = async () => {\n        try {\n            // Get the user's top tracks\n            const topTracksResponse = await spotifyApi.current.getMyTopTracks({ limit: 5 });\n            const trackIds = topTracksResponse.body.items.map(track => track.id);\n    \n            // Get recommendations based on these tracks\n            const recommendationsResponse = await spotifyApi.current.getRecommendations({ seed_tracks: trackIds });\n            const tracks = recommendationsResponse.body.tracks.map(track => ({\n                uri: track.uri,\n                name: track.name,\n                artist: track.artists[0].name,\n                artwork: track.album.images[0].url,\n            }));\n    \n            // Create a new playlist in the state\n            setNewPlaylist({ name: 'New Playlist', tracks });\n        } catch (err) {\n            console.error('Error:', err);\n        }\n    };\n\n    const savePlaylist = async () => {\n        try {\n            // Create a new playlist on Spotify\n            const playlistData = await spotifyApi.current.createPlaylist(userID, newPlaylist.name, { 'public' : false, 'description': playlistDescription });\n            const playlistId = playlistData.body.id;\n    \n            // Add tracks to the playlist\n            await spotifyApi.current.addTracksToPlaylist(playlistId, newPlaylist.tracks);\n    \n            // Fetch the playlist data\n            const data = await spotifyApi.current.getPlaylist(playlistId);\n            setPlaylist(data.body); // Update the playlist state\n        } catch (err) {\n            console.error('Error:', err);\n        }\n    };\n\n \n\n    return (\n        <div className=\"dashboard__playlist\">\n        {/* ... */}\n        <button onClick={createPlaylist}>Create</button>\n        {newPlaylist ? (\n            <div>\n                <h2>{newPlaylist.name}</h2>\n                {/* Render the new playlist tracks */}\n                {newPlaylist.tracks && newPlaylist.tracks.length > 0 ? (\n                    newPlaylist.tracks.map((track, index) => (\n                        <div key={index}>\n                            <img src={track.artwork} alt={track.name} />\n                            <p>{track.name} by {track.artist}</p>\n                        </div>\n                    ))\n                ) : (\n                    <p>No tracks in playlist.</p>\n                )}\n                <input type=\"text\" placeholder=\"Enter a description\" onChange={e => setPlaylistDescription(e.target.value)} />\n                <button onClick={savePlaylist}>Save to Spotify</button>\n            </div>\n        ) : (\n            <p>No new playlist data to display.</p>\n        )}\n        {/* ... */}\n    </div>\n);\n    \n}\n\nexport default Playlist;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}