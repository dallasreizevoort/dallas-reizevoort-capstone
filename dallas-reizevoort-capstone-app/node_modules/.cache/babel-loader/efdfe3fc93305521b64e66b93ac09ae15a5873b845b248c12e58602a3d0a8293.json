{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Playlist({\n  accessToken\n}) {\n  _s();\n  const [userID, setUserID] = useState();\n  const [playlist, setPlaylist] = useState(null);\n  const spotifyApi = useRef(new SpotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Get the user's ID\n    spotifyApi.current.getMe().then(res => {\n      setUserID(res.body.id);\n      console.log('User ID:', res.body.id); // Log the user ID\n    });\n  }, [accessToken]);\n  const createPlaylist = async () => {\n    // Get the user's top tracks\n    const topTracksResponse = await spotifyApi.current.getMyTopTracks({\n      limit: 5\n    });\n    console.log('Top Tracks Response:', topTracksResponse); // Log the top tracks response\n    const trackIds = topTracksResponse.body.items.map(track => track.id);\n\n    // Get recommendations based on these tracks\n    const recommendationsResponse = await spotifyApi.current.getRecommendations({\n      seed_tracks: trackIds\n    });\n    console.log('Recommendations Response:', recommendationsResponse); // Log the recommendations response\n    const trackUris = recommendationsResponse.body.tracks.map(track => track.uri);\n\n    // Create a new playlist\n    spotifyApi.current.createPlaylist('New Playlist', {\n      'public': false\n    }, async (err, data) => {\n      if (err) {\n        console.error('Error creating playlist:', err);\n        return;\n      }\n      const playlistId = data.body.id;\n      console.log('Playlist ID:', playlistId); // Log the playlist ID\n\n      // Add the recommended tracks to the playlist\n      spotifyApi.current.addTracksToPlaylist(playlistId, trackUris, (err, data) => {\n        if (err) console.error('Error adding tracks to playlist:', err); // Log any errors\n        else console.log('Created playlist!');\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard__playlist\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createPlaylist,\n      children: \"Create Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(Playlist, \"kPteyPK0qZlr+qrPgf/7G1GRDCs=\");\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SpotifyWebApi","axios","jsxDEV","_jsxDEV","Playlist","accessToken","_s","userID","setUserID","playlist","setPlaylist","spotifyApi","clientId","current","setAccessToken","getMe","then","res","body","id","console","log","createPlaylist","topTracksResponse","getMyTopTracks","limit","trackIds","items","map","track","recommendationsResponse","getRecommendations","seed_tracks","trackUris","tracks","uri","err","data","error","playlistId","addTracksToPlaylist","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport axios from 'axios';\n\nfunction Playlist({ accessToken }) {\n    const [userID, setUserID] = useState();\n    const [playlist, setPlaylist] = useState(null);\n    \n\n    const spotifyApi = useRef(\n        new SpotifyWebApi({\n            clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n        })\n    );\n\n    useEffect(() => {\n        if (!accessToken) return;\n        spotifyApi.current.setAccessToken(accessToken);\n    \n        // Get the user's ID\n        spotifyApi.current.getMe().then((res) => {\n            setUserID(res.body.id);\n            console.log('User ID:', res.body.id); // Log the user ID\n        });\n    }, [accessToken]);\n    \n    const createPlaylist = async () => {\n        // Get the user's top tracks\n        const topTracksResponse = await spotifyApi.current.getMyTopTracks({ limit: 5 });\n        console.log('Top Tracks Response:', topTracksResponse); // Log the top tracks response\n        const trackIds = topTracksResponse.body.items.map(track => track.id);\n    \n        // Get recommendations based on these tracks\n        const recommendationsResponse = await spotifyApi.current.getRecommendations({ seed_tracks: trackIds });\n        console.log('Recommendations Response:', recommendationsResponse); // Log the recommendations response\n        const trackUris = recommendationsResponse.body.tracks.map(track => track.uri);\n    \n        // Create a new playlist\n        spotifyApi.current.createPlaylist('New Playlist', { 'public' : false }, async (err, data) => {\n            if (err) {\n                console.error('Error creating playlist:', err);\n                return;\n            }\n    \n            const playlistId = data.body.id;\n            console.log('Playlist ID:', playlistId); // Log the playlist ID\n    \n            // Add the recommended tracks to the playlist\n            spotifyApi.current.addTracksToPlaylist(playlistId, trackUris, (err, data) => {\n                if (err) console.error('Error adding tracks to playlist:', err); // Log any errors\n                else console.log('Created playlist!');\n            });\n        });\n    };\n\n    return (\n        <div className=\"dashboard__playlist\">\n            <button onClick={createPlaylist}>Create Playlist</button>\n        </div>\n    );\n}\n\nexport default Playlist;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}