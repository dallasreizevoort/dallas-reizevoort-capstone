{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Playlist({\n  accessToken\n}) {\n  _s();\n  const [userID, setUserID] = useState();\n  const spotifyApi = useRef(new SpotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Get the user's ID\n    spotifyApi.current.getMe().then(res => {\n      setUserID(res.body.id);\n      console.log('User ID:', res.body.id); // Log the user ID\n    });\n  }, [accessToken]);\n  const createPlaylist = async () => {\n    // Get the user's top tracks\n    const topTracksResponse = await spotifyApi.current.getMyTopTracks({\n      limit: 5\n    });\n    console.log('Top Tracks Response:', topTracksResponse); // Log the top tracks response\n    const trackIds = topTracksResponse.body.items.map(track => track.id);\n\n    // Get recommendations based on these tracks\n    const recommendationsResponse = await spotifyApi.current.getRecommendations({\n      seed_tracks: trackIds\n    });\n    console.log('Recommendations Response:', recommendationsResponse); // Log the recommendations response\n    const trackUris = recommendationsResponse.body.tracks.map(track => track.uri);\n\n    // Create a new playlist\n    const url = `https://api.spotify.com/v1/users/${userID}/playlists`;\n    const data = {\n      name: 'New Playlist',\n      public: false\n    };\n    const config = {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    };\n    try {\n      const response = await axios.post(url, data, config);\n      const playlistId = response.data.id;\n      console.log('Playlist ID:', playlistId); // Log the playlist ID\n\n      // Add the recommended tracks to the playlist\n      spotifyApi.current.addTracksToPlaylist(playlistId, trackUris, (err, data) => {\n        if (err) console.error('Error adding tracks to playlist:', err); // Log any errors\n        else console.log('Created playlist!');\n      });\n    } catch (error) {\n      console.error(error.response.data);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard__playlist\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createPlaylist,\n      children: \"Create Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(Playlist, \"H5iFuYpwQOpheRKJW6IqxO1YhGE=\");\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SpotifyWebApi","axios","jsxDEV","_jsxDEV","Playlist","accessToken","_s","userID","setUserID","spotifyApi","clientId","current","setAccessToken","getMe","then","res","body","id","console","log","createPlaylist","topTracksResponse","getMyTopTracks","limit","trackIds","items","map","track","recommendationsResponse","getRecommendations","seed_tracks","trackUris","tracks","uri","url","data","name","public","config","headers","Authorization","response","post","playlistId","addTracksToPlaylist","err","error","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport axios from 'axios';\n\nfunction Playlist({ accessToken }) {\n    const [userID, setUserID] = useState();\n\n    const spotifyApi = useRef(\n        new SpotifyWebApi({\n            clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n        })\n    );\n\n    useEffect(() => {\n        if (!accessToken) return;\n        spotifyApi.current.setAccessToken(accessToken);\n    \n        // Get the user's ID\n        spotifyApi.current.getMe().then((res) => {\n            setUserID(res.body.id);\n            console.log('User ID:', res.body.id); // Log the user ID\n        });\n    }, [accessToken]);\n    \n    const createPlaylist = async () => {\n        // Get the user's top tracks\n        const topTracksResponse = await spotifyApi.current.getMyTopTracks({ limit: 5 });\n        console.log('Top Tracks Response:', topTracksResponse); // Log the top tracks response\n        const trackIds = topTracksResponse.body.items.map(track => track.id);\n    \n        // Get recommendations based on these tracks\n        const recommendationsResponse = await spotifyApi.current.getRecommendations({ seed_tracks: trackIds });\n        console.log('Recommendations Response:', recommendationsResponse); // Log the recommendations response\n        const trackUris = recommendationsResponse.body.tracks.map(track => track.uri);\n    \n        // Create a new playlist\n        const url = `https://api.spotify.com/v1/users/${userID}/playlists`;\n        const data = {\n            name: 'New Playlist',\n            public: false\n        };\n        const config = {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        };\n    \n        try {\n            const response = await axios.post(url, data, config);\n            const playlistId = response.data.id;\n            console.log('Playlist ID:', playlistId); // Log the playlist ID\n    \n            // Add the recommended tracks to the playlist\n            spotifyApi.current.addTracksToPlaylist(playlistId, trackUris, (err, data) => {\n                if (err) console.error('Error adding tracks to playlist:', err); // Log any errors\n                else console.log('Created playlist!');\n            });\n        } catch (error) {\n            console.error(error.response.data);\n        }\n    };\n\n    return (\n        <div className=\"dashboard__playlist\">\n            <button onClick={createPlaylist}>Create Playlist</button>\n        </div>\n    );\n}\n\nexport default Playlist;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}