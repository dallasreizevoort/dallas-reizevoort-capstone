{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport SpotifyPlayIcon from \"../../assets/images/Spotify_Play.png\";\nimport SpotifyPlayer from \"../SpotifyPlayer/SpotifyPlayer\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Playlist.scss\";\nimport Create from \"../../assets/images/create_icon.png\";\nimport Save from \"../../assets/images/save_icon.png\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Playlist({\n  accessToken\n}) {\n  _s();\n  const [userID, setUserID] = useState();\n  const [playlist, setPlaylist] = useState(null); // New state variable for the playlist\n  const [newPlaylist, setNewPlaylist] = useState(null);\n  const [playlistDescription, setPlaylistDescription] = useState(\"\");\n  const [playingTrackId, setPlayingTrackId] = useState(null);\n  const [playlistCreated, setPlaylistCreated] = useState(false);\n  const location = useLocation();\n  const [playlistId, setPlaylistId] = useState(null);\n  const [playlistName, setPlaylistName] = useState(\"\");\n  const spotifyApi = useRef(new SpotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  useEffect(() => {\n    setPlaylistCreated(false);\n    setNewPlaylist(null);\n  }, [location]);\n  useEffect(playlist => {\n    console.log(\"Playlist state:\", playlist);\n  }, [playlist]);\n  const handlePlay = trackId => {\n    console.log(\"Playing track with ID:\", trackId); // Add this line\n    setPlayingTrackId(trackId);\n  };\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Get the user's ID\n    spotifyApi.current.getMe().then(res => {\n      setUserID(res.body.id);\n      console.log(\"User ID:\", res.body.id); // Log the user ID\n    });\n  }, [accessToken]);\n\n  // Cant use callbacks here, playlist stays undefined\n  const createPlaylist = async () => {\n    try {\n      // Get the user's top tracks\n      const topTracksResponse = await spotifyApi.current.getMyTopTracks({\n        limit: 5\n      });\n      const trackIds = topTracksResponse.body.items.map(track => track.id);\n\n      // Get recommendations based on these tracks\n      const recommendationsResponse = await spotifyApi.current.getRecommendations({\n        seed_tracks: trackIds\n      });\n      const tracks = recommendationsResponse.body.tracks.map(track => ({\n        uri: track.uri,\n        name: track.name,\n        artist: track.artists[0].name,\n        artwork: track.album.images[0].url,\n        id: track.id\n      }));\n\n      // Create a new playlist in the state\n      setNewPlaylist({\n        name: \"New Playlist\",\n        tracks\n      });\n    } catch (err) {\n      console.error(\"Error:\", err);\n    }\n    setPlaylistCreated(true);\n  };\n  const savePlaylist = () => {\n    console.log('userID:', userID);\n    console.log('newPlaylist.name:', newPlaylist.name);\n    console.log('accessToken:', spotifyApi.current.getAccessToken());\n    let playlistId; // Define playlistId here\n\n    // Create a new playlist\n    axios.post(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n      name: newPlaylist,\n      public: false,\n      description: playlistDescription\n    }, {\n      headers: {\n        'Authorization': `Bearer ${spotifyApi.current.getAccessToken()}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      playlistId = response.data.id; // Set playlistId here\n      setPlaylistId(playlistId);\n\n      // Map newPlaylist.tracks to an array of track URIs\n      const trackUris = newPlaylist.tracks.map(track => track.uri);\n\n      // Add tracks to the playlist\n      return axios.post(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        uris: trackUris\n      }, {\n        headers: {\n          'Authorization': `Bearer ${spotifyApi.current.getAccessToken()}`,\n          'Content-Type': 'application/json'\n        }\n      });\n    }).then(() => {\n      // Fetch the playlist data\n      if (playlistId) {\n        // Check if playlistId is defined\n        return axios.get(`https://api.spotify.com/v1/playlists/${playlistId}`, {\n          headers: {\n            'Authorization': `Bearer ${spotifyApi.current.getAccessToken()}`\n          }\n        });\n      }\n    }).then(response => {\n      if (response) {\n        // Check if response is defined\n        setPlaylist(response.data); // Update the playlist state\n      }\n    }).catch(err => {\n      console.error(\"Error:\", err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playlists\",\n    children: [!newPlaylist || !newPlaylist.tracks || newPlaylist.tracks.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"playlists__header\",\n        children: \"Create a playlist based on your top songs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlists__create\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"playlists__button\",\n          onClick: createPlaylist,\n          children: [\"Create\", \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: Create,\n            className: \"playlists__icon\",\n            alt: \"create icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"playlists__header\",\n        children: [\"Not a fan of this one? Try Again \", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Create,\n          className: \"playlists__icon\",\n          onClick: createPlaylist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 80\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlists__save\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"playlists__name\",\n          placeholder: \"Name your playlist\",\n          onChange: e => setPlaylistName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"playlists__button\",\n          alt: \"playlists button\",\n          onClick: savePlaylist,\n          children: [\"Save to Spotify\", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://open.spotify.com/playlist/${playlistId}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: Save,\n              className: \"playlists__icon\",\n              alt: \"playlist save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), playingTrackId && /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n      trackId: playingTrackId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 28\n    }, this), newPlaylist && newPlaylist.tracks && newPlaylist.tracks.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: newPlaylist.tracks.map((track, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: track.artwork,\n            alt: track.name,\n            className: \"playlist__image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"playlist__title\",\n            children: [track.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"playlist__artist\",\n            children: [track.artist, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playlist__link\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"playlist__button\",\n              onClick: () => handlePlay(track.id),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: SpotifyPlayIcon,\n                alt: \"Spotify Play Icon\",\n                className: \"playlist__icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }, this))\n    }, void 0, false), !newPlaylist && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tracks in playlist.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 7\n  }, this);\n}\n_s(Playlist, \"ChYxiWDpmJ8nLZF7xTydbigM6p0=\", false, function () {\n  return [useLocation];\n});\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useContext","SpotifyWebApi","SpotifyPlayIcon","SpotifyPlayer","useLocation","Create","Save","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Playlist","accessToken","_s","userID","setUserID","playlist","setPlaylist","newPlaylist","setNewPlaylist","playlistDescription","setPlaylistDescription","playingTrackId","setPlayingTrackId","playlistCreated","setPlaylistCreated","location","playlistId","setPlaylistId","playlistName","setPlaylistName","spotifyApi","clientId","console","log","handlePlay","trackId","current","setAccessToken","getMe","then","res","body","id","createPlaylist","topTracksResponse","getMyTopTracks","limit","trackIds","items","map","track","recommendationsResponse","getRecommendations","seed_tracks","tracks","uri","name","artist","artists","artwork","album","images","url","err","error","savePlaylist","getAccessToken","post","public","description","headers","response","data","trackUris","uris","get","catch","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","type","placeholder","onChange","e","target","value","href","rel","index","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Playlist/Playlist.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport SpotifyPlayIcon from \"../../assets/images/Spotify_Play.png\";\nimport SpotifyPlayer from \"../SpotifyPlayer/SpotifyPlayer\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Playlist.scss\";\nimport Create from \"../../assets/images/create_icon.png\";\nimport Save from \"../../assets/images/save_icon.png\";\nimport axios from 'axios';\n\nfunction Playlist({ accessToken }) {\n  const [userID, setUserID] = useState();\n  const [playlist, setPlaylist] = useState(null); // New state variable for the playlist\n  const [newPlaylist, setNewPlaylist] = useState(null);\n  const [playlistDescription, setPlaylistDescription] = useState(\"\");\n  const [playingTrackId, setPlayingTrackId] = useState(null);\n  const [playlistCreated, setPlaylistCreated] = useState(false);\n  const location = useLocation();\n  const [playlistId, setPlaylistId] = useState(null);\n  const [playlistName, setPlaylistName] = useState(\"\");\n\n  const spotifyApi = useRef(\n    new SpotifyWebApi({\n      clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n    })\n  );\n\n  useEffect(() => {\n    setPlaylistCreated(false);\n    setNewPlaylist(null);\n  }, [location]);\n\n  useEffect(\n    (playlist) => {\n      console.log(\"Playlist state:\", playlist);\n    },\n    [playlist]\n  );\n\n  const handlePlay = (trackId) => {\n    console.log(\"Playing track with ID:\", trackId); // Add this line\n    setPlayingTrackId(trackId);\n  };\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Get the user's ID\n    spotifyApi.current.getMe().then((res) => {\n      setUserID(res.body.id);\n      console.log(\"User ID:\", res.body.id); // Log the user ID\n    });\n  }, [accessToken]);\n\n  // Cant use callbacks here, playlist stays undefined\n  const createPlaylist = async () => {\n    try {\n      // Get the user's top tracks\n      const topTracksResponse = await spotifyApi.current.getMyTopTracks({\n        limit: 5,\n      });\n      const trackIds = topTracksResponse.body.items.map((track) => track.id);\n\n      // Get recommendations based on these tracks\n      const recommendationsResponse =\n        await spotifyApi.current.getRecommendations({ seed_tracks: trackIds });\n      const tracks = recommendationsResponse.body.tracks.map((track) => ({\n        uri: track.uri,\n        name: track.name,\n        artist: track.artists[0].name,\n        artwork: track.album.images[0].url,\n        id: track.id,\n      }));\n\n      // Create a new playlist in the state\n      setNewPlaylist({ name: \"New Playlist\", tracks });\n    } catch (err) {\n      console.error(\"Error:\", err);\n    }\n    setPlaylistCreated(true);\n  };\n\n  const savePlaylist = () => {\n    console.log('userID:', userID);\n    console.log('newPlaylist.name:', newPlaylist.name);\n    console.log('accessToken:', spotifyApi.current.getAccessToken());\n  \n    let playlistId; // Define playlistId here\n  \n    // Create a new playlist\n    axios.post(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n      name: newPlaylist,\n      public: false,\n      description: playlistDescription\n    }, {\n      headers: {\n        'Authorization': `Bearer ${spotifyApi.current.getAccessToken()}`,\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(response => {\n      playlistId = response.data.id; // Set playlistId here\n      setPlaylistId(playlistId);\n  \n      // Map newPlaylist.tracks to an array of track URIs\n      const trackUris = newPlaylist.tracks.map(track => track.uri);\n  \n      // Add tracks to the playlist\n      return axios.post(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        uris: trackUris\n      }, {\n        headers: {\n          'Authorization': `Bearer ${spotifyApi.current.getAccessToken()}`,\n          'Content-Type': 'application/json'\n        }\n      });\n    })\n    .then(() => {\n      // Fetch the playlist data\n      if (playlistId) { // Check if playlistId is defined\n        return axios.get(`https://api.spotify.com/v1/playlists/${playlistId}`, {\n          headers: {\n            'Authorization': `Bearer ${spotifyApi.current.getAccessToken()}`,\n          }\n        });\n      }\n    })\n    .then(response => {\n      if (response) { // Check if response is defined\n        setPlaylist(response.data); // Update the playlist state\n      }\n    })\n    .catch(err => {\n      console.error(\"Error:\", err);\n    });\n  };\n\n    return (\n      <div className=\"playlists\">\n        {!newPlaylist || !newPlaylist.tracks || newPlaylist.tracks.length === 0 ? (\n          <>\n            <h2 className=\"playlists__header\">\n              Create a playlist based on your top songs\n            </h2>\n            <div className=\"playlists__create\">\n              <button className=\"playlists__button\" onClick={createPlaylist}>\n                Create{\" \"}\n                <img\n                  src={Create}\n                  className=\"playlists__icon\"\n                  alt=\"create icon\"\n                ></img>\n              </button>\n            </div>\n          </>\n        ) : (\n          <>\n            <h2 className=\"playlists__header\">Not a fan of this one? Try Again <img src={Create} className=\"playlists__icon\" onClick={createPlaylist}></img></h2>\n            <div className=\"playlists__save\">\n              <input\n                type=\"text\"\n                className=\"playlists__name\"\n                placeholder=\"Name your playlist\"\n                onChange={(e) => setPlaylistName(e.target.value)}\n              />\n              <button className=\"playlists__button\" alt=\"playlists button\" onClick={savePlaylist}>\n  Save to Spotify \n  <a href={`https://open.spotify.com/playlist/${playlistId}`} target=\"_blank\" rel=\"noopener noreferrer\">\n    <img src={Save} className=\"playlists__icon\" alt=\"playlist save\"></img>\n  </a>\n</button>\n            </div>\n          </>\n        )}\n        {playingTrackId && <SpotifyPlayer trackId={playingTrackId} />}\n        {newPlaylist && newPlaylist.tracks && newPlaylist.tracks.length > 0 && (\n          <>\n            {newPlaylist.tracks.map((track, index) => (\n              <div key={index} className=\"playlist\">\n                <div className=\"playlist__container\">\n                  <img\n                    src={track.artwork}\n                    alt={track.name}\n                    className=\"playlist__image\"\n                  />\n                  <span className=\"playlist__title\">{track.name} </span>\n                </div>\n                <div className=\"playlist__container\">\n                  <span className=\"playlist__artist\">{track.artist} </span>\n                  <div className=\"playlist__link\">\n                    <button className=\"playlist__button\" onClick={() => handlePlay(track.id)}>\n                      <img\n                        src={SpotifyPlayIcon}\n                        alt=\"Spotify Play Icon\"\n                        className=\"playlist__icon\"\n                      />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </>\n        )}\n        {!newPlaylist && <p>No tracks in playlist.</p>}\n      </div>\n    );\n}\n\nexport default Playlist;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}