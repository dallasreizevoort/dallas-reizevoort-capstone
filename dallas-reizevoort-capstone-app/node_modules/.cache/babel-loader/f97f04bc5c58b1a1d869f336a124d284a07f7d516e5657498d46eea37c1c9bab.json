{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\nfunction SpotifyPlayer({\n  accessToken,\n  trackId\n}) {\n  _s();\n  const [sdkReady, setSdkReady] = useState(false);\n  const [playerState, setPlayerState] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const spotifyApi = useRef(null);\n  const player = useRef(null);\n  useEffect(() => {\n    // Load Spotify Web Playback SDK\n    const scriptTag = document.createElement('script');\n    scriptTag.src = 'https://sdk.scdn.co/spotify-player.js';\n    scriptTag.async = true;\n    scriptTag.onload = () => setSdkReady(true);\n    document.body.appendChild(scriptTag);\n\n    // Define the global function that the SDK calls when it's ready\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      console.log('Spotify Web Playback SDK ready');\n    };\n  }, []);\n  useEffect(() => {\n    if (!accessToken || !sdkReady) return;\n    spotifyApi.current = new SpotifyWebApi();\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Create a new player\n    player.current = new window.Spotify.Player({\n      name: 'Web Playback SDK Player',\n      getOAuthToken: cb => {\n        cb(accessToken);\n      }\n    });\n\n    // Error handling\n    player.current.addListener('initialization_error', ({\n      message\n    }) => {\n      console.error(message);\n    });\n    player.current.addListener('authentication_error', ({\n      message\n    }) => {\n      console.error(message);\n    });\n    player.current.addListener('account_error', ({\n      message\n    }) => {\n      console.error(message);\n    });\n    player.current.addListener('playback_error', ({\n      message\n    }) => {\n      console.error(message);\n    });\n\n    // Playback status updates\n    player.current.addListener('player_state_changed', state => {\n      console.log(state);\n      setPlayerState(state);\n    });\n\n    // Ready\n    player.current.addListener('ready', ({\n      device_id\n    }) => {\n      console.log('Ready with Device ID', device_id);\n    });\n\n    // Not Ready\n    player.current.addListener('not_ready', ({\n      device_id\n    }) => {\n      console.log('Device ID has gone offline', device_id);\n    });\n\n    // Connect to the player\n    player.current.connect();\n    return () => {\n      // Clean up on unmount\n      player.current && player.current.disconnect();\n    };\n  }, [accessToken, sdkReady]);\n  useEffect(() => {\n    if (!player.current || !trackId || !deviceId) return; // Check if the device ID is available\n\n    // Play the track using spotify-web-api-node\n    spotifyApi.current.play({\n      uris: [`spotify:track:${trackId}`]\n    }).then(function () {\n      console.log('Playback started');\n    }, function (err) {\n      console.error('Something went wrong!', err);\n    });\n  }, [trackId, deviceId]); // Add deviceId as a dependency\n\n  return null; // This component does not render anything\n}\n_s(SpotifyPlayer, \"gc2XuXshxl7l7w1igRJW4moTycg=\");\n_c = SpotifyPlayer;\nexport default SpotifyPlayer;\nvar _c;\n$RefreshReg$(_c, \"SpotifyPlayer\");","map":{"version":3,"names":["React","useEffect","useState","useRef","SpotifyWebApi","SpotifyPlayer","accessToken","trackId","_s","sdkReady","setSdkReady","playerState","setPlayerState","deviceId","setDeviceId","spotifyApi","player","scriptTag","document","createElement","src","async","onload","body","appendChild","window","onSpotifyWebPlaybackSDKReady","console","log","current","setAccessToken","Spotify","Player","name","getOAuthToken","cb","addListener","message","error","state","device_id","connect","disconnect","play","uris","then","err","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/SpotifyPlayer/SpotifyPlayer.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-node';\n\nfunction SpotifyPlayer({ accessToken, trackId }) {\n  const [sdkReady, setSdkReady] = useState(false);\n  const [playerState, setPlayerState] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const spotifyApi = useRef(null);\n  const player = useRef(null);\n\n  useEffect(() => {\n    // Load Spotify Web Playback SDK\n    const scriptTag = document.createElement('script');\n    scriptTag.src = 'https://sdk.scdn.co/spotify-player.js';\n    scriptTag.async = true;\n    scriptTag.onload = () => setSdkReady(true);\n    document.body.appendChild(scriptTag);\n  \n    // Define the global function that the SDK calls when it's ready\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      console.log('Spotify Web Playback SDK ready');\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!accessToken || !sdkReady) return;\n\n    spotifyApi.current = new SpotifyWebApi();\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Create a new player\n    player.current = new window.Spotify.Player({\n      name: 'Web Playback SDK Player',\n      getOAuthToken: cb => { cb(accessToken); }\n    });\n\n    // Error handling\n    player.current.addListener('initialization_error', ({ message }) => { console.error(message); });\n    player.current.addListener('authentication_error', ({ message }) => { console.error(message); });\n    player.current.addListener('account_error', ({ message }) => { console.error(message); });\n    player.current.addListener('playback_error', ({ message }) => { console.error(message); });\n\n    // Playback status updates\n    player.current.addListener('player_state_changed', state => {\n      console.log(state);\n      setPlayerState(state);\n    });\n\n    // Ready\n    player.current.addListener('ready', ({ device_id }) => {\n      console.log('Ready with Device ID', device_id);\n    });\n\n    // Not Ready\n    player.current.addListener('not_ready', ({ device_id }) => {\n      console.log('Device ID has gone offline', device_id);\n    });\n\n    // Connect to the player\n    player.current.connect();\n\n    return () => {\n      // Clean up on unmount\n      player.current && player.current.disconnect();\n    };\n  }, [accessToken, sdkReady]);\n\n  useEffect(() => {\n    if (!player.current || !trackId || !deviceId) return; // Check if the device ID is available\n  \n    // Play the track using spotify-web-api-node\n    spotifyApi.current.play({ uris: [`spotify:track:${trackId}`] })\n      .then(function() {\n        console.log('Playback started');\n      }, function(err) {\n        console.error('Something went wrong!', err);\n      });\n  }, [trackId, deviceId]); // Add deviceId as a dependency\n\n  return null; // This component does not render anything\n}\n\nexport default SpotifyPlayer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}