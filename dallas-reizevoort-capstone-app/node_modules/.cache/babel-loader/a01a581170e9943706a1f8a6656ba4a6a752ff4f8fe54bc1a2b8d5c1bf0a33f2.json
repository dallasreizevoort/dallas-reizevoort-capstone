{"ast":null,"code":"var _jsxFileName = \"/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Mood/Mood.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Mood({\n  accessToken\n}) {\n  _s();\n  const ref = useRef();\n  const spotifyApi = useRef(new SpotifyWebApi({\n    clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\"\n  }));\n  useEffect(() => {\n    spotifyApi.current.setAccessToken(accessToken);\n\n    // Fetch the user's listening history\n    spotifyApi.current.getMyRecentlyPlayedTracks({\n      limit: 50\n    }).then(response => {\n      const tracks = response.body.items;\n\n      // Get the audio features for these tracks\n      return spotifyApi.current.getAudioFeaturesForTracks(tracks.map(track => track.track.id));\n    }).then(response => {\n      const audioFeatures = response.body.audio_features;\n\n      // Store the mood data in a time-series format\n      const moodData = audioFeatures.map((features, index) => ({\n        date: new Date().getTime() - index * 1000 * 60 * 60,\n        // This is a placeholder. You should use the actual play time of each track.\n        valence: features.valence\n      }));\n\n      // Create the line chart with D3.js\n      const svg = d3.select(ref.current);\n      const xScale = d3.scaleTime().domain(d3.extent(moodData, d => d.date)).range([0, 500]);\n      const yScale = d3.scaleLinear().domain([0, 1]).range([500, 0]);\n      const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.valence));\n      svg.append('path').datum(moodData).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 1.5).attr('d', line);\n    }).catch(err => {\n      console.error('Something went wrong:', err);\n    });\n  }, [accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 12\n  }, this);\n}\n_s(Mood, \"DPQ0+wisHBllscv5YB3Te63pQiY=\");\n_c = Mood;\nexport default Mood;\nvar _c;\n$RefreshReg$(_c, \"Mood\");","map":{"version":3,"names":["React","useEffect","useRef","d3","SpotifyWebApi","jsxDEV","_jsxDEV","Mood","accessToken","_s","ref","spotifyApi","clientId","current","setAccessToken","getMyRecentlyPlayedTracks","limit","then","response","tracks","body","items","getAudioFeaturesForTracks","map","track","id","audioFeatures","audio_features","moodData","features","index","date","Date","getTime","valence","svg","select","xScale","scaleTime","domain","extent","d","range","yScale","scaleLinear","line","x","y","append","datum","attr","catch","err","console","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dallas/BrainStation/dallas-reizevoort-capstone/dallas-reizevoort-capstone-app/src/components/Mood/Mood.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport SpotifyWebApi from \"spotify-web-api-node\";\n\nfunction Mood({ accessToken }) {\n    const ref = useRef();\n    const spotifyApi = useRef(\n        new SpotifyWebApi({\n            clientId: \"6ba0cc8b29e145ea99f2401c09a35e6e\",\n        })\n    );\n\n    useEffect(() => {\n        spotifyApi.current.setAccessToken(accessToken);\n\n        // Fetch the user's listening history\n        spotifyApi.current.getMyRecentlyPlayedTracks({ limit: 50 })\n            .then(response => {\n                const tracks = response.body.items;\n\n                // Get the audio features for these tracks\n                return spotifyApi.current.getAudioFeaturesForTracks(tracks.map(track => track.track.id));\n            })\n            .then(response => {\n                const audioFeatures = response.body.audio_features;\n\n                // Store the mood data in a time-series format\n                const moodData = audioFeatures.map((features, index) => ({\n                    date: new Date().getTime() - index * 1000 * 60 * 60, // This is a placeholder. You should use the actual play time of each track.\n                    valence: features.valence\n                }));\n\n                // Create the line chart with D3.js\n                const svg = d3.select(ref.current);\n                const xScale = d3.scaleTime().domain(d3.extent(moodData, d => d.date)).range([0, 500]);\n                const yScale = d3.scaleLinear().domain([0, 1]).range([500, 0]);\n                const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.valence));\n                svg.append('path').datum(moodData).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 1.5).attr('d', line);\n            })\n            .catch(err => {\n                console.error('Something went wrong:', err);\n            });\n    }, [accessToken]);\n\n    return <svg ref={ref} />;\n}\n\nexport default Mood;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}